{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","monster","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchFiled","target","value","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"6UAEaA,G,YAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACvB,gCAAML,EAAMI,SAASE,MACrB,2BAAIN,EAAMI,SAASG,UCHlBC,EAAW,SAAAR,GACpB,OACA,yBAAKC,UAAU,aACTD,EAAMI,SAASK,KAAI,SAAAC,GAAO,OAAG,kBAAC,EAAD,CAAMC,IAAKD,EAAQL,GAAKD,SAAWM,SCJ7DE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,2BAAOC,KAAK,SACZd,UAAU,SACVY,YAAcA,EACdG,SAAUF,MC2BCG,G,wDA7Bf,aAAc,IAAD,8BACX,gBAMDH,aAAc,SAACI,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,QAAO,kBAAIC,QAAQC,IAAI,EAAKC,WAN/D,EAAKA,MAAQ,CAACrB,SAAU,GACxBgB,YAAa,IAHF,E,gEAUO,IAAD,OACjBM,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACf,SAAS0B,S,+BAG5B,IAAD,EACyBC,KAAKN,MAA7BrB,EADD,EACCA,SAASgB,EADV,EACUA,YACVY,EAAmB5B,EAAS6B,QAAO,SAAAvB,GAAO,OAAEA,EAAQJ,KAAK4B,cAAcC,SAASf,EAAYc,kBAClG,OACA,yBAAKjC,UAAU,OACb,kDACD,kBAAC,EAAD,CAAWY,YAAY,iBACvBC,aAAeiB,KAAKjB,eACnB,kBAAC,EAAD,CAAUV,SAAW4B,S,GAxBTI,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.6745bb45.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = (props)=>{\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt=\"monsters\" src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}/>\r\n            <h2> {props.monsters.name}</h2>\r\n            <p>{props.monsters.email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = props=> {\r\n    return(\r\n    <div className='card-list'>\r\n        { props.monsters.map(monster=> <Card key={monster.id}  monsters= {monster}/>) }\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>(\r\n\r\n    <input type='search' \r\n    className='search'\r\n    placeholder= {placeholder}\r\n    onChange={handleChange} />\r\n)","import React from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from '../src/components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends React.Component{\nconstructor(){\n  super();\n  this.state = {monsters: [],\n  searchFiled: ''}\n  // this.handleChange = this.handleChange.bind(this);\n}\n\n handleChange= (e)=>{\n this.setState({searchFiled:e.target.value},()=>console.log(this.state))\n}\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\n  .then(users=>this.setState({monsters:users}))\n}\n\n  render(){\n    const {monsters,searchFiled} = this.state;\n    const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchFiled.toLowerCase()));\n    return (\n    <div className='App'>\n      <h1> Monsters Rolodex </h1>\n     <SearchBox placeholder='search monster' \n     handleChange= {this.handleChange} />\n      <CardList monsters= {filteredMonsters}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}